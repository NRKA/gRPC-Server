// Code generated by MockGen. DO NOT EDIT.
// Source: ./kafka_interface.go
//
// Generated by this command:
//
//	mockgen -source ./kafka_interface.go -destination=./mocks/kafka_interface.go -package=mock_kafka_interface
//
// Package mock_kafka_interface is a generated GoMock package.
package mock_kafka_interface

import (
	kafka "github.com/NRKA/gRPC-Server/internal/kafka"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockKafkaInterface is a mock of KafkaInterface interface.
type MockKafkaInterface struct {
	ctrl     *gomock.Controller
	recorder *MockKafkaInterfaceMockRecorder
}

// MockKafkaInterfaceMockRecorder is the mock recorder for MockKafkaInterface.
type MockKafkaInterfaceMockRecorder struct {
	mock *MockKafkaInterface
}

// NewMockKafkaInterface creates a new mock instance.
func NewMockKafkaInterface(ctrl *gomock.Controller) *MockKafkaInterface {
	mock := &MockKafkaInterface{ctrl: ctrl}
	mock.recorder = &MockKafkaInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKafkaInterface) EXPECT() *MockKafkaInterfaceMockRecorder {
	return m.recorder
}

// SendEvent mocks base method.
func (m *MockKafkaInterface) SendEvent(topic string, event kafka.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", topic, event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockKafkaInterfaceMockRecorder) SendEvent(topic, event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockKafkaInterface)(nil).SendEvent), topic, event)
}
